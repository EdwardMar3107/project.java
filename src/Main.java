import Animals.*;
import Bank.CheckingAccount;
import Bank.Client;
import Bank.SavingsAccount;
import Beverage.Beverage;
import Cars.Car;
import Cars.Engine;
import Cars.Wheel;
import DoubleInterface.Circle;
import Employee.Employee;
import Movie.Movie;
import Priority.Priority;
import Shop.Customer;
import Shop.Product;
import Song.Song;
import Students.Aspirant;
import Students.Student;
import Game.*;
import Beverage.*;
import Computer.*;
import Employee.*;
import Movie.*;
import Song.*;
import java.util.*;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import Priority.*;

public class Main {
    public static void main(String[] args) {
        return;



//        Map<String, Integer> marks = new HashMap<>();
//        Map<String, Integer> ages = new HashMap<>();
//
//        marks.put("–í–ª–∞–¥", 100);
//        marks.put("–≠–¥—É–∞—Ä–¥", 90);
//        marks.put("–ü–µ–ª—å–º–µ–Ω—å", 20);
//
//        ages.put("–í–ª–∞–¥", 25);
//        ages.put("–≠–¥—É–∞—Ä–¥", 26);
//        ages.put("–ü–µ–ª—å–º–µ–Ω—å", 20);
//
//        List<Map<String, Object>> list = marks.entrySet().stream()
//                .filter(entry -> ages.containsKey(entry.getKey()))
//                .map(stringIntegerEntry -> {
//                    Map<String, Object> student = new HashMap<>();
//                    student.put("name", stringIntegerEntry.getKey());
//                    student.put("age", ages.get(stringIntegerEntry.getKey()));
//                    student.put("mark", stringIntegerEntry.getValue());
//                    return student;
//                })
//                .filter(student -> (Integer) student.get("mark") > 80 && (Integer) student.get("age") > 23)
//                .sorted((Comparator.comparingInt(s -> (Integer) s.get("mark"))))
//                .toList();
//
//        System.out.println(list);


    }



    public static void Song() {
        Set<Song> songs = new HashSet<>();

        songs.add(new Song("Back in Black", "AC/DC", Genre.ROCK));
        songs.add(new Song("Poker Face", "Lady Gaga", Genre.POP));
        songs.add(new Song("Lose Yourself", "Eminem", Genre.RAP));
        songs.add(new Song("Come Away With Me", "Norah Jones", Genre.JAZZ));
        songs.add(new Song("Back in Black", "AC/DC", Genre.ROCK));
        songs.add(new Song("Another Brick in the Wall", "Pink Floyd", Genre.ROCK));
        songs.add(new Song("Lose Yourself", "Eminem", Genre.RAP));

        Map<Genre, List<Song>> playlist = new HashMap<>();

        for (Song song : songs) {
            playlist
                    .computeIfAbsent(song.getGenre(), genre -> new ArrayList<>())
                    .add(song);
        }

        System.out.println("üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ –∂–∞–Ω—Ä–∞–º:\n");
        for (Genre genre : Genre.values()) {
            List<Song> genreSongs = playlist.getOrDefault(genre, new ArrayList<>());
            System.out.println(genre.getEmoji() + " " + genre.name() + ":");
            for (Song s : genreSongs) {
                System.out.println(" - " + s);
            }
            System.out.println();
        }

    }

    public static void priority() {
        Set<WorkTask> taskSet = new HashSet<>();

        taskSet.add(new WorkTask("–°–¥–∞—Ç—å –æ—Ç—á—ë—Ç", Priority.HIGH, Status.NEW));
        taskSet.add(new WorkTask("–°–¥–∞—Ç—å –æ—Ç—á—ë—Ç", Priority.HIGH, Status.DONE)); //
        taskSet.add(new WorkTask("–ü–æ—á–∏–Ω–∏—Ç—å –±–∞–≥", Priority.URGENT, Status.IN_PROGRESS));
        taskSet.add(new WorkTask("–û–±–µ–¥", Priority.LOW, Status.NEW));
        taskSet.add(new WorkTask("–û–±–µ–¥", Priority.LOW, Status.NEW)); //

        System.out.println("üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:");
        for (WorkTask task : taskSet) {
            System.out.println(task.toString());
        }
    }

    public static void movie() {
        Movie[] movies = {
                new Movie("–ù–∞—á–∞–ª–æ", new Director("–ù–æ–ª–∞–Ω", 1970), 8.8),
                new Movie("–ù–∞—á–∞–ª–æ", new Director("–ù–æ–ª–∞–Ω", 1970), 8.8),
                new Movie("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", new Director("–ù–æ–ª–∞–Ω", 1970), 8.6),
                new Movie("–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", new Director("–†–æ—É–ª–∏–Ω–≥", 1965), 9.1),
                new Movie("–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", new Director("–†–æ—É–ª–∏–Ω–≥", 1965), 9.1),
                new Movie("–ê–≤–∞—Ç–∞—Ä", new Director("–ö—ç–º–µ—Ä–æ–Ω", 1954), 9.0)
        };

        int matchCount = 0;

        for (int i = 0; i < movies.length; i++) {
            for (int j = i + 1; j < movies.length; j++) {
                if (movies[i].equals(movies[j])) {
                    System.out.println("üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: [" + i + "] –∏ [" + j + "]");
                    matchCount++;
                }

            }
        }
        System.out.println("\n–í—Å–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: " + matchCount);


    }

    public static void doubleInterface() {
        Circle circle = new Circle("–ö—Ä—É–≥", 25);

        circle.draw();
        circle.scale(2);
        circle.draw();
    }

    public static void shop() {

        Customer customer = new Customer("–≠–¥—É–∞—Ä–¥");

        customer.addToCart(new Product("–•–ª–µ–±", 50));
        customer.addToCart(new Product("–í–æ–¥–∞", 20));
        customer.addToCart(new Product("–°–æ–ª—å", 10));
        customer.addToCart(new Product("–°–∞—Ö–∞—Ä", 15));

        customer.checkout();
    }

    public static void cars() {

        Car car = new Car ("Ferrari", new Engine("V6", 2500), new Wheel(30, "summer"));
        Car car1 = new Car ("Porsche", new Engine("V7", 3500), new Wheel(20, "winter"));
        Car car2 = new Car ("Audi", new Engine("V8", 2000), new Wheel(35, "semi"));
        Car car3 = new Car ("BMW", new Engine("V9", 4500), new Wheel(25, "diff seasons"));

        System.out.println(car.getInfo());
        System.out.println(car1.getInfo());
        System.out.println(car2.getInfo());
        System.out.println(car3.getInfo());
    }

    public static void employee() {

        Employee[] staff = {
                new FullTimeEmployee("–û–ª—å–≥–∞", 120000),
                new PartTimeEmployee("–î–º–∏—Ç—Ä–∏–π", 80, 600),
                new FullTimeEmployee("–ò—Ä–∏–Ω–∞", 95000),
                new PartTimeEmployee("–ê–Ω—Ç–æ–Ω", 50, 750)
        };

        System.out.println("üí∞ –û—Ç—á—ë—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º:");
        for (Employee emp : staff) {
            System.out.println(emp.getName() + ": " + emp.calculateSalary() + " ‚ÇΩ");
        }

    }


    public static void computer() {
        Computer computer = new Computer(new Processor("Intel i5"), new Memory(16));
        System.out.println(computer.spec());

    }

    public static void beverage() {
        Beverage[] menu = {new Tea("–ú—è—Ç–Ω—ã–π —á–∞–π"),
                new Coffee("Americano") };

        for (Beverage beverage : menu) {
            System.out.println("‚Ä¢ " + beverage.getInfo() + "‚ÇΩ");

        }
    }

    public static void bank() {

        Client eduard = new Client("Eduard");
        Client nadezhda = new Client("Nadezhda");

        CheckingAccount accEduard1 = new CheckingAccount("Eduard checking", 20000);
        SavingsAccount accEduard2 = new SavingsAccount("Eduard Savings", 100000, 3);

        CheckingAccount accNadezhda1 = new CheckingAccount("Nadezhda checking", 10000);
        SavingsAccount accNadezhda2 = new SavingsAccount("Nadezhda saving", 50000, 3);

        eduard.addAccount(accEduard1);
        eduard.addAccount(accEduard2);

        nadezhda.addAccount(accNadezhda1);
        nadezhda.addAccount(accNadezhda2);

        eduard.transfer(accEduard1, accNadezhda1, 1000);
        nadezhda.transfer(accNadezhda1, accNadezhda2, 1000);

        System.out.println(accEduard1.getInfo());
        System.out.println(accNadezhda1.getInfo());
        System.out.println(accNadezhda2.getInfo());
    }

    public static void animal() {
        Animal[] animals = {
                new Dog("–ú—É—Ä–∑–∏–∫"),
                new Cat("–ü–µ—Ä—Å–∏–∫"),
                new Bear("–ì—Ä–∏–∑–ª–∏")
        };

        Veterinarian vet = new Veterinarian();
        for (Animal animal : animals) {
            vet.treatAnimal(animal);

        }

        for (Animal animal : animals) {
            animal.makeNoise();
            animal.eat();
            System.out.println();
        }
    }

    public static void student() {

        Student[] students = new Student[2];
        students[0] = new Student("Edward", "Ezersky", 2014, 5);
        students[1] = new Aspirant("Vlad", "Ponomarenko", 1337, 2, "PussySlayer");

        System.out.println("–£ " + students[0].getFirstName() + " –°—Ç–∏–ø–µ–Ω–¥–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + students[0].getScholarship() + " —Ä—É–±–ª–µ–π");
        System.out.println("–£ " + students[1].getFirstName() + " –°—Ç–∏–ø–µ–Ω–¥–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + students[1].getScholarship() + " —Ä—É–±–ª–µ–π");
    }

    public static void game() {

        Player[] hero = { new Mage("Frozen", 100, 1000, 100, new Staff(20)),
                new Warrior("Arya", 100, 1000, 50, new Bow(20, 100)),
                new Healer("Quenn", 100, 1000, 200)
        };

        for (Player p : hero) {
            if (p instanceof Healer) {
                ((Healer) p).heal(30);
            }
        }
    }

}
